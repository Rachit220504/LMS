generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(cuid())
  name           String
  email          String       @unique
  password       String
  role           Role         @default(STUDENT)
  resetToken     String?      
  resetTokenExpiry DateTime?
  avatarUrl      String?
  bio            String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  studentCourses Enrollment[] @relation("StudentEnrollments")
  teacherCourses Course[]     @relation("CourseTeacher")
  submissions    Submission[] @relation("UserSubmissions")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model Course {
  id          String         @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  teacher     User           @relation("CourseTeacher", fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId   String
  students    Enrollment[]   @relation("CourseEnrollments")
  assignments Assignment[]   @relation("CourseAssignments")
  materials   CourseMaterial[] @relation("CourseMaterials")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model CourseMaterial {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  fileType    String
  fileSize    Int
  course      Course   @relation("CourseMaterials", fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Enrollment {
  id        String   @id @default(cuid())
  student   User     @relation("StudentEnrollments", fields: [studentId], references: [id], onDelete: Cascade)
  studentId String
  course    Course   @relation("CourseEnrollments", fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  progress  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, courseId])
}

model Assignment {
  id          String       @id @default(cuid())
  title       String
  description String
  dueDate     DateTime
  course      Course       @relation("CourseAssignments", fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  submissions Submission[] @relation("AssignmentSubmissions")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Submission {
  id           String     @id @default(cuid())
  content      String?
  fileUrl      String?
  fileType     String?
  fileName     String?
  fileSize     Int?
  grade        Int?
  feedback     String?
  submittedAt  DateTime   @default(now())
  student      User       @relation("UserSubmissions", fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String
  assignment   Assignment @relation("AssignmentSubmissions", fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String
  isLate       Boolean    @default(false)
  isGraded     Boolean    @default(false)
  gradedAt     DateTime?

  @@unique([studentId, assignmentId])
}
